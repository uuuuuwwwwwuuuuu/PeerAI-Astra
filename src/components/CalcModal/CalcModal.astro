---
import './CalcModal.scss';
import CalcModalProgress from './CalcModalProgress/CalcModalProgress.astro';
import PriceCard from '../PriceCard/PriceCard.astro';

import { priceData } from '../../assets/priceCards';
---

<div class="calculator_window disable">
    <div class="calculator_header">
        <div class="calculator_header_left_elements">
            <img src='/icons/calculator.svg' alt="calculator icon" />
            <span>Usage plan calculator</span>
        </div>
        <button class="calculator_close_btn">
            <img src='/icons/cross.svg' alt="cross" />
        </button>
    </div>
    <div class="calculator_main">
        <div class="calculator_main_left_elements">
            <div class="calculator_progress_wrapper">
                <CalcModalProgress
                    unitType='MAUs'
                    title='Monthly Active Users'/>
                <CalcModalProgress
                    unitType='builds'
                    title='Builds'/>
                <CalcModalProgress
                    unitType='mins'
                    title='Workflows CI/CD minutes'/>
            </div>
            <div class="calculator_text_wrapper">
                <p>Expecting over 1,000,000 MAU? <span>Contact us</span> for a more accurate estimate</p>
                <div class="calculator_info">
                    <span>*</span>
                    <p>Your bill may vary from the estimated extra usage based on your specific
                        usage. Estimates are based on average MAU, build, and CI/CD minute costs.
                        Extra usage is charged when exceeding the resource allotment included in the
                        subscription plan.</p>
                </div>
            </div>
        </div>
        <section class="calculator_main_right_elements">
            {
                priceData.map(priceCard => {
                    return <PriceCard 
                        title={priceCard.title}
                        info={priceCard.info}
                        price={priceCard.price}
                        options={priceCard.options}
                        isModal
                    />
                })
            }
        </section>
    </div>
</div>

<script>
import type { ChangeProgressEvent } from "./CalcModalProgress/CalcModalProgress.astro.0.mts";

const modalPriceCardList: NodeListOf<HTMLDivElement> = document.querySelectorAll('.modal_price');

let MAUsValue = 0;
let buildsValue = 0;
let minsValue = 0;

document.addEventListener('change-progress', (event: any ) => {
    const detail = event.detail as ChangeProgressEvent;

    switch (detail.unitType) {
        case 'MAUs':
            MAUsValue = detail.value;
            break;
        case 'builds':
            buildsValue = detail.value;
            break;
        case 'mins':
            minsValue = detail.value;
            break;
        }

    
    if (MAUsValue > 50000 || buildsValue > 225 || minsValue > 1000) {
        modalPriceCardList.forEach((card, index) => {
            if (index === 3) {
                card.classList.remove('disable');
            } else {
                card.classList.add('disable');
            }
        })
    } else if (MAUsValue > 3000 || buildsValue > 45 || minsValue > 350) {
        modalPriceCardList.forEach((card, index) => {
            if (index === 2) {
                card.classList.remove('disable');
            } else {
                card.classList.add('disable');
            }
        })
    } else if (MAUsValue > 1000 || buildsValue > 30 || minsValue > 60) {
        modalPriceCardList.forEach((card, index) => {
            if (index === 1) {
                card.classList.remove('disable');
            } else {
                card.classList.add('disable');
            }
        })
    } else {
        modalPriceCardList.forEach((card, index) => {
            if (index === 0) {
                card.classList.remove('disable');
            } else {
                card.classList.add('disable');
            }
        })
    }
});

modalPriceCardList.forEach((priceCard, index) => {
    if (index === 0) return
    priceCard.classList.add('disable');
});

</script>